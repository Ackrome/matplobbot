version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: mpb-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: mpb-postgres
    restart: unless-stopped
    env_file: ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  mpb-telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: mpb-telegram-bot
    restart: unless-stopped
    env_file: ./.env
    volumes:
      - bot_logs:/app/logs        # Именованный volume для логов бота
      - matplobblib_lib:/usr/local/lib/python3.11/site-packages/matplobblib # Persist library updates
      - ./examples:/app/examples    # Volume для файлов-примеров
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy



  mpb-fastapi-stats:
    build:
      context: .
      dockerfile: fastapi_stats_app/Dockerfile # Путь к Dockerfile для FastAPI приложения
    container_name: mpb-fastapi-stats-app
    ports:
      - "9583:9583"
    volumes:
      - bot_logs:/app/logs        # Используем тот же volume для доступа к логам бота
      - ./fastapi_stats_app:/app/fastapi_stats_app  # Опционально: для live reload во время разработки
    environment: # The env_file directive is sufficient for database credentials
      WATCHFILES_FORCE_POLLING: "true" # Может помочь с live reload в Docker
    depends_on:
      mpb-telegram-bot:
        condition: service_started # API can start once the bot container starts
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9583/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
volumes:
  bot_logs:
  matplobblib_lib:
  postgres_data: