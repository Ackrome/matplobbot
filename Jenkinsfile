// Jenkinsfile for Matplobbot Deployment
pipeline {
    agent any

    parameters {
        string(name: 'BOT_IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag for the bot')
        string(name: 'API_IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag for the API')
        string(name: 'SCHEDULER_IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag for the scheduler')
    }

    // This block securely binds your Jenkins credentials to environment variables for this job
    environment {
        PROD_BOT_TOKEN      = credentials('PROD_BOT_TOKEN')
        PROD_ADMIN_USER_ID  = credentials('PROD_ADMIN_USER_ID')
        PROD_GITHUB_TOKEN   = credentials('PROD_GITHUB_TOKEN')
        PROD_POSTGRES_USER  = credentials('PROD_POSTGRES_USER')
        PROD_POSTGRES_PASSWORD = credentials('PROD_POSTGRES_PASSWORD')
        PROD_POSTGRES_DB    = credentials('PROD_POSTGRES_DB')        PROD_POSTGRES_HOST  = credentials('PROD_POSTGRES_HOST')
        PROD_POSTGRES_PORT  = credentials('PROD_POSTGRES_PORT')
        
    }

    stages {
        stage('Deploy to Production') {
            steps {
                script {
                    sshagent(credentials: ['app-vm-ssh-key']) {
                        // Stage 1: Securely write the .env file on the remote server
                        // We use a 'heredoc' (&lt;&lt;EOF) for a clean, multi-line write.
                        sh """
                        ssh -o StrictHostKeyChecking=no root@app-vm.panthera-banjo.ts.net 'cat &lt;&lt;EOF &gt; ~/matplobbot/.env
                        # This file is generated by the Jenkins CI/CD pipeline
                        BOT_TOKEN=${PROD_BOT_TOKEN}
                        ADMIN_USER_ID=${PROD_ADMIN_USER_ID}
                        GITHUB_TOKEN=${PROD_GITHUB_TOKEN}
                        POSTGRES_USER=${PROD_POSTGRES_USER}
                        POSTGRES_PASSWORD=${PROD_POSTGRES_PASSWORD}
                        POSTGRES_DB=${PROD_POSTGRES_DB}
                        POSTGRES_HOST=${PROD_POSTGRES_HOST}
                        POSTGRES_PORT=${PROD_POSTGRES_PORT}
                        EOF'
                        """
                        // Stage 2: clear docker build cache
                        sh "ssh -o StrictHostKeyChecking=no root@app-vm.panthera-banjo.ts.net 'docker system prune --all --force'"
                        // Stage 3: Run the deployment script, which will now use the new .env file
                        sh "ssh -o StrictHostKeyChecking=no root@app-vm.panthera-banjo.ts.net 'cd ~/matplobbot && ./deploy.sh ${params.BOT_IMAGE_TAG} ${params.API_IMAGE_TAG} ${params.SCHEDULER_IMAGE_TAG}'"
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Deployment finished.'
        }
    }
}