# Dockerfile.bot
FROM node:20-slim

# noninteractive to avoid tzdata/ui prompts
ENV DEBIAN_FRONTEND=noninteractive \
    APT_OPTS="-y --no-install-recommends"


# 1) small essentials + python
RUN set -eux; \
    find /etc/apt -name "*.list" -exec sed -i 's|http://deb\.debian\.org|http://mirror.truenetwork.ru|g' {} + || true; \
    find /etc/apt -name "*.sources" -exec sed -i 's|URIs: http://deb\.debian\.org|URIs: http://mirror.truenetwork.ru|g' {} + || true; \
    apt-get update; \
    apt-get install $APT_OPTS \
      python3 python3-pip ca-certificates wget xdg-utils fonts-liberation fonts-dejavu-core \
      fonts-dejavu python3.11-venv git \
      git curl build-essential procps && \
    rm -rf /var/lib/apt/lists/*

# 2) Puppeteer/Chromium dependencies for mermaid-cli
#    This layer is crucial for mermaid-cli to be able to launch a headless browser.
RUN set -eux; \
    find /etc/apt -name "*.list" -exec sed -i 's|http://deb\.debian\.org|http://mirror.truenetwork.ru|g' {} + || true; \
    find /etc/apt -name "*.sources" -exec sed -i 's|URIs: http://deb\.debian\.org|URIs: http://mirror.truenetwork.ru|g' {} + || true; \
    apt-get update; \
    apt-get install $APT_OPTS \
      libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdbus-1-3 \
      libdrm2 libgbm1 libgtk-3-0 libpango-1.0-0 libpangocairo-1.0-0 libx11-6 \
      libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 \
      libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 libasound2 \
      libgdk-pixbuf-2.0-0 && \
    rm -rf /var/lib/apt/lists/*

# 2) TeX packages (split so you can prune/change easily)
#    Remove any packages you don't need to reduce image size.
RUN set -eux; \
    find /etc/apt -name "*.list" -exec sed -i 's|http://deb\.debian\.org|http://mirror.truenetwork.ru|g' {} + || true; \
    find /etc/apt -name "*.sources" -exec sed -i 's|URIs: http://deb\.debian\.org|URIs: http://mirror.truenetwork.ru|g' {} + || true; \
    apt-get update && \
    apt-get install $APT_OPTS pandoc && \
    apt-get install $APT_OPTS \
      texlive-latex-base \
      texlive-latex-recommended \
      texlive-latex-extra \
      texlive-fonts-recommended \
      texlive-fonts-extra \
      texlive-xetex \
      texlive-pictures \
      texlive-science \
      texlive-bibtex-extra \
      dvipng \
      ghostscript \
      texlive-lang-all \
      latexmk \
      gosu \
      dos2unix && \
    rm -rf /var/lib/apt/lists/*

# 3) Install mermaid-cli globally (npm already exists in node:20-slim)
RUN set -eux; \
    find /etc/apt -name "*.list" -exec sed -i 's|http://deb\.debian\.org|http://mirror.truenetwork.ru|g' {} + || true; \
    find /etc/apt -name "*.sources" -exec sed -i 's|URIs: http://deb\.debian\.org|URIs: http://mirror.truenetwork.ru|g' {} + || true; \
    npm install -g @mermaid-js/mermaid-cli --no-fund --no-update-notifier; \
    mmdc --version || true

RUN rm -rf /var/lib/apt/lists/*



WORKDIR /app

COPY requirements.txt .

# --- START: CORRECTED VENV INSTALLATION BLOCK ---

# 1. Create a virtual environment in a standard location
RUN python3 -m venv /opt/venv

# 2. Add the venv's bin directory to the PATH.
# This makes `pip` and `python` commands automatically use the venv's executables.
ENV PATH="/opt/venv/bin:$PATH"

# 3. Now, install dependencies into the activated venv.
# We don't need the complex shell logic anymore.
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir markdown-it-py

# --- END: CORRECTED VENV INSTALLATION BLOCK ---

# Set environment variables for Puppeteer and Matplotlib
# Note: Since we are using a venv, we don't need to manage the PATH here anymore.
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    HOME=/home/appuser \
    MPLCONFIGDIR=/home/appuser/.config/matplotlib \
    NUMBA_DISABLE_JITCACHE=1

# Copy the rest of the application code
COPY bot/puppeteer-config.json /app/bot/
COPY bot/ /app/bot/

CMD ["python3", "-m", "bot.main"]
