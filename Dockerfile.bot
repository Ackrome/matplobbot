# Dockerfile.bot - Multi-stage build

# --- Stage 1: Node builder for Mermaid-CLI ---
FROM node:20-slim AS builder-node

RUN npm install -g @mermaid-js/mermaid-cli --no-fund --no-update-notifier

# --- Stage 2: TeX and Python builder ---
FROM python:3.11-slim AS builder-tex

# noninteractive to avoid tzdata/ui prompts
ENV DEBIAN_FRONTEND=noninteractive \
    APT_OPTS="-y --no-install-recommends"

# 1) Install base essentials, Python (already present), and all TeX/Pandoc dependencies
RUN set -eux; \
    find /etc/apt -name "*.list" -exec sed -i 's|http://deb\.debian\.org|http://mirror.truenetwork.ru|g' {} + || true; \
    find /etc/apt -name "*.sources" -exec sed -i 's|URIs: http://deb\.debian\.org|URIs: http://mirror.truenetwork.ru|g' {} + || true; \
    apt-get update; \
    apt-get install $APT_OPTS \
      # Puppeteer/Chromium dependencies for mermaid-cli
      libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdbus-1-3 \
      libdrm2 libgbm1 libgtk-3-0 libpango-1.0-0 libpangocairo-1.0-0 libx11-6 \
      libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 \
      libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 libasound2 \
      libgdk-pixbuf-2.0-0 \
      # TeX packages
      pandoc \
      texlive-latex-base \
      texlive-latex-recommended \
      texlive-latex-extra \
      texlive-fonts-recommended \
      texlive-fonts-extra \
      texlive-xetex \
      texlive-pictures \
      texlive-science \
      texlive-bibtex-extra \
      dvipng \
      ghostscript \
      texlive-lang-all \
      latexmk \
      gosu \
      dos2unix \
      # We can use a smaller language package if only Russian/English are needed
      texlive-lang-cyrillic \
      # Other utilities
      procps && \
    rm -rf /var/lib/apt/lists/*

# 2. Create a virtual environment that we can copy to the final stage
RUN python3 -m venv /opt/venv

# --- Stage 3: Final Production Image ---
FROM python:3.11-slim

ENV DEBIAN_FRONTEND=noninteractive \
    # Add the venv's bin directory to the PATH
    PATH="/opt/venv/bin:$PATH" \
    # Set environment variables for Puppeteer and Matplotlib
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    HOME=/home/appuser \
    MPLCONFIGDIR=/home/appuser/.config/matplotlib \
    NUMBA_DISABLE_JITCACHE=1

# 1. Install only the RUNTIME dependencies for Puppeteer
RUN apt-get update && apt-get install -y --no-install-recommends \
      libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdbus-1-3 \
      libdrm2 libgbm1 libgtk-3-0 libpango-1.0-0 libpangocairo-1.0-0 libx11-6 \
      libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 \
      libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 libasound2 \
      libgdk-pixbuf-2.0-0 \
      # Add procps for process management if needed
      procps && \
    rm -rf /var/lib/apt/lists/*

# 2. Copy only the necessary binaries and libraries from the builder stage
COPY --from=builder-tex /usr/bin/pandoc /usr/bin/
COPY --from=builder-tex /usr/bin/xelatex /usr/bin/
COPY --from=builder-tex /usr/bin/latexmk /usr/bin/
COPY --from=builder-tex /usr/share/texlive /usr/share/texlive
COPY --from=builder-tex /usr/share/fonts/truetype/dejavu /usr/share/fonts/truetype/dejavu

# 2. Copy the mermaid-cli executable and its node_modules from the node builder
COPY --from=builder-node /usr/local/bin/mmdc /usr/local/bin/
COPY --from=builder-node /usr/local/lib/node_modules /usr/local/lib/node_modules

# 3. Copy the Python virtual environment
COPY --from=builder-tex /opt/venv /opt/venv

# 4. Install Python dependencies
WORKDIR /
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir markdown-it-py

# 5. Copy the application code
COPY bot/puppeteer-config.json /bot/
COPY bot/ /bot/

CMD ["python3", "-m", "bot.main"]
