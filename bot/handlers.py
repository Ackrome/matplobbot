import logging

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, FSInputFile, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
from telegraph import Telegraph
from telegraph.exceptions import TelegraphException

import asyncio
import sys
import matplotlib
matplotlib.use('Agg') # Use a non-interactive backend for server environments
import matplobblib
import os
import pkg_resources
import re
import hashlib
from cachetools import TTLCache
# from main import logging

from . import database
from . import keyboards as kb
from . import service
from . import github_service
import importlib
SEARCH_RESULTS_PER_PAGE = 10

async def update_library_async(library_name):
    try:
        # 1. Get the version before updating
        old_version = pkg_resources.get_distribution(library_name).version

        process = await asyncio.create_subprocess_exec(
        sys.executable, "-m", "pip", "install", "--upgrade", library_name,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)
        stdout, stderr = await process.communicate()

        if process.returncode == 0:
            # 2. Reload the package metadata to get the new version
            importlib.reload(pkg_resources)
            new_version = pkg_resources.get_distribution(library_name).version
            return True, f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ '{library_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å {old_version} –¥–æ {new_version}!"
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ '{library_name}': {stderr.decode()}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ '{library_name}': {stderr.decode()}"
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"


router = Router()

# Cache for search results to avoid long callback_data
# {user_id: {'query': str, 'results': list}}
user_search_results_cache = {}

@router.message(CommandStart())
async def comand_start(message: Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!',
        reply_markup=kb.get_main_reply_keyboard(message.from_user.id)
    )
    
@router.message(Command('help'))
async def comand_help(message: Message):
    await message.answer(
        '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ matplobblib.\n\n'
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:',
        reply_markup=kb.get_help_inline_keyboard(message.from_user.id)
    )

@router.message(StateFilter('*'), Command("cancel"))
@router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤—ã–π—Ç–∏ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è).
    """
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=kb.get_main_reply_keyboard(message.from_user.id)
        )
        return

    logging.info(f"Cancelling state {current_state} for user {message.from_user.id}")
    await state.clear()
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –∏ —Å—Ç–∞–≤–∏–º –æ—Å–Ω–æ–≤–Ω—É—é
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=kb.get_main_reply_keyboard(message.from_user.id),
    )

##################################################################################################
# ASK
##################################################################################################
class Search(StatesGroup):
    query = State()

class MarkdownSearch(StatesGroup):
    query = State()

class LatexRender(StatesGroup):
    formula = State()

class MermaidRender(StatesGroup):
    code = State()

class RepoManagement(StatesGroup):
    add_repo = State()
    edit_repo = State()
    choose_repo_for_search = State()
    choose_repo_for_browse = State()


async def display_matp_all_navigation(message: Message, path: str = "", page: int = 0, is_edit: bool = False):
    """Helper to display navigation for /matp_all command."""
    path_parts = path.split('.') if path else []
    level = len(path_parts)
    
    builder = InlineKeyboardBuilder()
    header_text = ""

    # Level 0: Submodules
    if level == 0:
        header_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–º–æ–¥—É–ª—å"
        items = sorted(matplobblib.submodules)
        # No pagination for submodules, assuming list is short
        for item in items:
            path_hash = hashlib.sha1(item.encode()).hexdigest()[:16]
            kb.code_path_cache[path_hash] = item
            builder.row(InlineKeyboardButton(text=f"üìÅ {item}", callback_data=f"matp_all_nav_hash:{path_hash}:0"))
    
    # Level 1: Topics
    elif level == 1:
        submodule = path_parts[0]
        header_text = f"–ü–æ–¥–º–æ–¥—É–ª—å `{submodule}`. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É"
        all_topics = sorted(kb.topics_data.get(submodule, {}).get('topics', []))
        
        start = page * SEARCH_RESULTS_PER_PAGE
        end = start + SEARCH_RESULTS_PER_PAGE
        page_items = all_topics[start:end]

        for item in page_items:
            full_path = f"{submodule}.{item}"
            path_hash = hashlib.sha1(full_path.encode()).hexdigest()[:16]
            kb.code_path_cache[path_hash] = full_path
            builder.row(InlineKeyboardButton(text=f"üìö {item}", callback_data=f"matp_all_nav_hash:{path_hash}:0"))
        
        # Back button
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è .. (–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–º–æ–¥—É–ª—è–º)", callback_data="matp_all_nav_hash:root:0"))
        
        total_pages = (len(all_topics) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE
        if total_pages > 1:
            pagination_buttons = []
            path_hash = hashlib.sha1(path.encode()).hexdigest()[:16]
            kb.code_path_cache[path_hash] = path
            if page > 0:
                pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"matp_all_nav_hash:{path_hash}:{page - 1}"))
            pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"))
            if end < len(all_topics):
                pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"matp_all_nav_hash:{path_hash}:{page + 1}"))
            builder.row(*pagination_buttons)

    # Level 2: Codes
    elif level == 2:
        submodule, topic = path_parts
        header_text = f"–¢–µ–º–∞ `{topic}`. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É"
        all_codes = sorted(kb.topics_data.get(submodule, {}).get('codes', {}).get(topic, []))

        start = page * SEARCH_RESULTS_PER_PAGE
        end = start + SEARCH_RESULTS_PER_PAGE
        page_items = all_codes[start:end]

        for item in page_items:
            full_code_path = f"{path}.{item}"
            path_hash = hashlib.sha1(full_code_path.encode()).hexdigest()[:16]
            kb.code_path_cache[path_hash] = full_code_path
            builder.row(InlineKeyboardButton(text=f"üìÑ {item}", callback_data=f"matp_all_show:{path_hash}"))

        # Back button
        back_path = submodule
        path_hash = hashlib.sha1(back_path.encode()).hexdigest()[:16]
        kb.code_path_cache[path_hash] = back_path
        builder.row(InlineKeyboardButton(text=f"‚¨ÖÔ∏è .. (–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º)", callback_data=f"matp_all_nav_hash:{path_hash}:0"))

        total_pages = (len(all_codes) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE
        if total_pages > 1:
            pagination_buttons = []
            path_hash = hashlib.sha1(path.encode()).hexdigest()[:16]
            kb.code_path_cache[path_hash] = path
            if page > 0:
                pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"matp_all_nav_hash:{path_hash}:{page - 1}"))
            pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"))
            if end < len(all_codes):
                pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"matp_all_nav_hash:{path_hash}:{page + 1}"))
            builder.row(*pagination_buttons)

    else:
        header_text = "–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."

    reply_markup = builder.as_markup()
    
    if is_edit:
        try:
            await message.edit_text(header_text, reply_markup=reply_markup, parse_mode='markdown')
        except TelegramBadRequest as e:
            if "message is not modified" not in e.message:
                raise
    else:
        await message.answer(header_text, reply_markup=reply_markup, parse_mode='markdown')

@router.message(Command('matp_all'))
async def matp_all_command_inline(message: Message):
    """Handles the /matp_all command with inline navigation."""
    await display_matp_all_navigation(message, path="", page=0, is_edit=False)

@router.callback_query(F.data.startswith("matp_all_nav_hash:"))
async def cq_matp_all_navigate(callback: CallbackQuery):
    """Handles navigation for the /matp_all command."""
    parts = callback.data.split(":")
    path_hash = parts[1]
    page = int(parts[2])
    
    if path_hash == 'root':
        path = ""
    else:
        path = kb.code_path_cache.get(path_hash)

    if path is None:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /matp_all.", show_alert=True)
        return

    await callback.answer()
    await display_matp_all_navigation(callback.message, path=path, page=page, is_edit=True)

@router.callback_query(F.data.startswith("matp_all_show:"))
async def cq_matp_all_show_code(callback: CallbackQuery):
    """Shows the selected code from the /matp_all navigation."""
    path_hash = callback.data.split(":", 1)[1]
    code_path = kb.code_path_cache.get(path_hash)
    if not code_path:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /matp_all.", show_alert=True)
        return
    
    await callback.answer()
    await service.show_code_by_path(callback.message, callback.from_user.id, code_path, "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä")

##################################################################################################
# UPDATE
##################################################################################################
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID'))

@router.message(Command('update'))
async def update(message: Message):
    if message.from_user.id != ADMIN_USER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
        return

    status_msg = await message.answer("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ `matplobblib`...")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 
    # await message.answer_chat_action("typing")
    success, status_message_text = await update_library_async('matplobblib')
    if success:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è matplobblib, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        importlib.reload(matplobblib) # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º –∏ –∏–º–µ—Ç—å –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        await status_msg.edit_text(status_message_text) # –£–±—Ä–∞–Ω reply_markup
    else:
        await status_msg.edit_text(status_message_text) # –£–±—Ä–∞–Ω reply_markup
    
    await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
##################################################################################################
# CLEAR CACHE
##################################################################################################
@router.message(Command('clear_cache'))
async def clear_cache_command(message: Message):
    """Handles the /clear_cache command, admin-only. Clears all application caches."""
    if message.from_user.id != ADMIN_USER_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
        return

    status_msg = await message.answer("–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞...")

    # 1. Clear in-memory caches in handlers.py
    user_search_results_cache.clear()
    md_search_results_cache.clear()
    github_search_cache.clear() # This is a local cache in handlers.py
    
    # 2. Clear in-memory caches from other modules
    kb.code_path_cache.clear()
    github_service.github_content_cache.clear()
    github_service.github_dir_cache.clear()

    # 3. Clear persistent cache in database
    await database.clear_latex_cache()

    await status_msg.edit_text("‚úÖ –í–µ—Å—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
##################################################################################################
# EXECUTE
##################################################################################################
class Execution(StatesGroup):
    code = State()
EXECUTE_HELP_TEXT = (
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ Python –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –≤–∞—à –∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é `matplotlib.pyplot.savefig`), –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º.\n\n"
    "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤—ã–≤–æ–¥:**\n"
    "1.  **–¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥** (stdout/stderr).\n"
    "2.  **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª (png, jpg, jpeg, gif).\n"
    "3.  **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç** (Markdown/HTML).\n\n"
    "**–ü—Ä–∏–º–µ—Ä —Å Matplotlib:**\n"
    "```python\n"
    "import matplotlib.pyplot as plt\n"
    "plt.plot([1, 2, 3], [1, 4, 9])\n"
    "plt.savefig('my_plot.png')\n"
    "plt.close()\n"
    "```\n\n"
    "**–ü—Ä–∏–º–µ—Ä —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:**\n"
    "–§—É–Ω–∫—Ü–∏–∏ `display`, `Markdown`, `HTML` –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞.\n"
    "```python\n"
    "display(Markdown('# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1\\n## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2\\n*–ö—É—Ä—Å–∏–≤*'))\n"
    "```"
)

@router.message(Command('execute'))
async def execute_command(message: Message, state: FSMContext):
    # """Handles the /execute command, admin-only."""
    # if message.from_user.id != ADMIN_USER_ID:
    #     await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
    #     return

    await state.set_state(Execution.code)
    await message.answer(
        EXECUTE_HELP_TEXT,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='markdown'
    )

@router.message(Execution.code)
async def process_execution_from_user(message: Message, state: FSMContext):
    """Executes the received Python code and sends back the output, including images and rich display objects."""
    await state.clear()
    await message.bot.send_chat_action(message.chat.id, "typing")
    await service.execute_code_and_send_results(message, message.text)

##################################################################################################
# LATEX
##################################################################################################

@router.message(Command('latex'))
async def latex_command(message: Message, state: FSMContext):
    await state.set_state(LatexRender.formula)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ä–º—É–ª—É –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ LaTeX (–º–æ–∂–Ω–æ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö `$...`):",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(LatexRender.formula)
async def process_latex_formula(message: Message, state: FSMContext):
    await state.clear()
    formula = message.text
    
    status_msg = await message.answer("üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—É–ª—ã...")
    await message.bot.send_chat_action(message.chat.id, "upload_photo") 
    try:
        settings = await database.get_user_settings(message.from_user.id)
        padding = settings['latex_padding']
        dpi = settings['latex_dpi']
        image_buffer = await service.render_latex_to_image(formula, padding, dpi)
        
        await status_msg.delete()
        await message.answer_photo(
            photo=BufferedInputFile(image_buffer.read(), filename="formula.png"),
            caption=f"–í–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞:\n`{formula}`",
            parse_mode='markdown'
        )
        await message.answer("–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))

    except (ValueError, RuntimeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ LaTeX –¥–ª—è '{formula}': {e}", exc_info=True)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
        error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É.\n\n**–û—à–∏–±–∫–∞:**\n```\n{e}\n```\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
        await status_msg.edit_text(error_text, parse_mode='markdown')
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ LaTeX –¥–ª—è '{formula}': {e}", exc_info=True)
        await status_msg.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        )

##################################################################################################
# MERMAID
##################################################################################################

@router.message(Command('mermaid'))
async def mermaid_command(message: Message, state: FSMContext):
    """Handles the /mermaid command for rendering diagrams."""
    await state.set_state(MermaidRender.code)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ Mermaid:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(MermaidRender.code)
async def process_mermaid_code(message: Message, state: FSMContext):
    """Renders the received Mermaid code into a PNG image."""
    await state.clear()
    mermaid_code = message.text
    
    status_msg = await message.answer("üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∏–∞–≥—Ä–∞–º–º—ã...")
    await message.bot.send_chat_action(message.chat.id, "upload_photo")
    try:
        image_buffer = await service.render_mermaid_to_image(mermaid_code)
        
        await status_msg.delete()
        await message.answer_photo(
            photo=BufferedInputFile(image_buffer.read(), filename="diagram.png"),
            caption=f"–í–∞—à–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ Mermaid."
        )
        await message.answer("–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))

    except (ValueError, RuntimeError) as e:
        error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É.\n\n**–û—à–∏–±–∫–∞:**\n```\n{e}\n```"
        await status_msg.edit_text(error_text, parse_mode='markdown')
##################################################################################################
# MARKDOWN SEARCH & ABSTRACTS
##################################################################################################

# Cache for markdown search results
# {user_id: {'query': str, 'results': list[dict]}}
md_search_results_cache = {}
# Cache for GitHub markdown search results to reduce API calls
github_search_cache = TTLCache(maxsize=100, ttl=600) # Cache search results for 10 minutes



@router.message(Command('lec_all'))
async def lec_all_command(message: Message, state: FSMContext):
    """Handles /lec_all, asking for a repo if multiple are configured."""
    user_id = message.from_user.id
    repos = await database.get_user_repos(user_id)

    if not repos:
        await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ /settings.")
        return

    if len(repos) == 1:
        await service.display_lec_all_path(message, repo_path=repos[0], path="")
        return

    # Ask user to choose a repo
    builder = InlineKeyboardBuilder()
    for repo in repos:
        repo_hash = hashlib.sha1(repo.encode()).hexdigest()[:16]
        kb.code_path_cache[repo_hash] = repo
        builder.row(InlineKeyboardButton(text=repo, callback_data=f"lec_browse_repo:{repo_hash}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("lec_browse_repo:"))
async def cq_lec_browse_repo_selected(callback: CallbackQuery):
    """Handles the selection of a repository for browsing."""
    repo_hash = callback.data.split(":", 1)[1]
    repo_path = kb.code_path_cache.get(repo_hash)
    if not repo_path:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
        return
    
    await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞—é {repo_path}...")
    await service.display_lec_all_path(callback.message, repo_path=repo_path, path="", is_edit=True)
    
@router.callback_query(F.data.startswith("abs_nav_hash:"))
async def cq_lec_all_navigate(callback: CallbackQuery):
    """Handles navigation through lec_all repo directories."""
    path_hash = callback.data.split(":", 1)[1]
    path = kb.code_path_cache.get(path_hash)

    if path is None: # Important to check for None, as "" is a valid path (root)
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /lec_all.", show_alert=True)
        return

    await callback.answer()
    # The path from cache now includes the repo, e.g., "owner/repo/folder" or just "owner/repo"
    path_parts = path.split('/')
    repo_path = f"{path_parts[0]}/{path_parts[1]}"
    relative_path = "/".join(path_parts[2:])
    
    await service.display_lec_all_path(callback.message, repo_path=repo_path, path=relative_path, is_edit=True)

@router.callback_query(F.data.startswith("abs_show_hash:"))
async def cq_lec_all_show_file(callback: CallbackQuery):
    """Calls the helper to display a file from the lec_all repo."""
    path_hash = callback.data.split(":", 1)[1]
    file_path = kb.code_path_cache.get(path_hash)

    if not file_path:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é.", show_alert=True)
        return

    # Send a new temporary message to inform the user about processing.
    file_name = file_path.split('/')[-1]
    status_msg = await callback.message.answer(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ `{file_name}`...", parse_mode='markdown')
    await callback.answer() # Acknowledge the button press

    path_parts = file_path.split('/')
    repo_path = f"{path_parts[0]}/{path_parts[1]}"
    relative_path = "/".join(path_parts[2:])
    await service.display_github_file(callback.message, callback.from_user.id, repo_path, relative_path, status_msg_to_delete=status_msg)

async def get_md_search_results_keyboard(user_id: int, page: int = 0) -> InlineKeyboardMarkup | None:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    search_data = md_search_results_cache.get(user_id)
    if not search_data or not search_data.get('results'):
        return None

    results = search_data['results']
    builder = InlineKeyboardBuilder()
    
    start = page * SEARCH_RESULTS_PER_PAGE
    end = start + SEARCH_RESULTS_PER_PAGE
    page_items = results[start:end]

    for i, item in enumerate(page_items):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –¥–ª—è callback_data, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã
        path_hash = hashlib.sha1(item['path'].encode()).hexdigest()[:16]
        kb.code_path_cache[path_hash] = item['path']
        builder.row(InlineKeyboardButton(
            text=f"üìÑ {item['path']}",
            callback_data=f"show_md_hash:{path_hash}"
        ))

    # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    total_pages = (len(results) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE
    if total_pages > 1:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"md_search_page:{page - 1}"))
        
        pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"))

        if end < len(results):
            pagination_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"md_search_page:{page + 1}"))
        
        builder.row(*pagination_buttons)

    return builder.as_markup()


async def search_github_md(query: str, repo_path: str) -> list[dict] | None:
    """Searches for markdown files in a specific GitHub repository."""
    github_token = os.getenv("GITHUB_TOKEN")
    if not github_token:
        logging.error("GITHUB_TOKEN environment variable not set. Markdown search is disabled.")
        return None
    
    search_query = f"{query} repo:{repo_path} extension:md"
    url = "https://api.github.com/search/code"
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "X-GitHub-Api-Version": "2022-11-28",
        "Authorization": f"Bearer {github_token}"
    }
    params = {"q": search_query, "per_page": 100} # Get up to 100 results

    try:
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    results = data.get("items", [])
                    # Store in cache on success
                    github_search_cache[query] = results
                    return results
                else:
                    error_text = await response.text()
                    logging.error(f"GitHub API search failed with status {response.status}: {error_text}")
                    return None
    except Exception as e:
        logging.error(f"Error during GitHub API request: {e}", exc_info=True)
        return None

@router.message(Command('lec_search'))
async def lec_search_command(message: Message, state: FSMContext):
    """Handles the /lec_search command."""
    user_id = message.from_user.id
    repos = await database.get_user_repos(user_id)

    if not repos:
        await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ /settings.")
        return

    if len(repos) == 1:
        await state.update_data(repo_to_search=repos[0])
        await state.set_state(MarkdownSearch.query)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é `{repos[0]}`:", parse_mode='markdown', reply_markup=ReplyKeyboardRemove())
        return

    # Ask user to choose a repo
    builder = InlineKeyboardBuilder()
    for repo in repos:
        repo_hash = hashlib.sha1(repo.encode()).hexdigest()[:16]
        kb.code_path_cache[repo_hash] = repo
        builder.row(InlineKeyboardButton(text=repo, callback_data=f"lec_search_repo:{repo_hash}"))

    await state.set_state(RepoManagement.choose_repo_for_search)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=builder.as_markup())

@router.callback_query(RepoManagement.choose_repo_for_search, F.data.startswith("lec_search_repo:"))
async def cq_lec_search_repo_selected(callback: CallbackQuery, state: FSMContext):
    repo_hash = callback.data.split(":", 1)[1]
    repo_path = kb.code_path_cache.get(repo_hash)
    if not repo_path:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
        return

    await state.update_data(repo_to_search=repo_path)
    await state.set_state(MarkdownSearch.query)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é `{repo_path}`:", parse_mode='markdown')
    await callback.answer()

@router.message(MarkdownSearch.query)
async def process_md_search_query(message: Message, state: FSMContext):
    """Processes the user's query for markdown files."""
    user_data = await state.get_data()
    repo_to_search = user_data.get('repo_to_search')
    await state.clear()
    query = message.text
    status_msg = await message.answer(f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ `{repo_to_search}`...", parse_mode='markdown')
    results = await search_github_md(query, repo_to_search)

    if results is None:
        await status_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
        return

    if not results:
        await status_msg.edit_text(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
        return

    user_id = message.from_user.id
    md_search_results_cache[user_id] = {'query': query, 'results': results, 'repo_path': repo_to_search}

    keyboard = await get_md_search_results_keyboard(user_id, page=0)
    total_pages = (len(results) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE

    await status_msg.edit_text(
        f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∞–π–ª–æ–≤ –≤ `{repo_to_search}` –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'.\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("md_search_page:"))
async def cq_md_search_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º."""
    user_id = callback.from_user.id
    search_data = md_search_results_cache.get(user_id)
    if not search_data:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await callback.message.delete()
        return

    page = int(callback.data.split(":", 1)[1])
    keyboard = await get_md_search_results_keyboard(user_id, page=page)
    
    results = search_data['results']
    query = search_data['query']
    repo_path = search_data['repo_path']
    total_pages = (len(results) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE

    try:
        await callback.message.edit_text(
            f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∞–π–ª–æ–≤ –≤ `{repo_path}` –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'.\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}:",
            reply_markup=keyboard
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            raise
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("show_md_hash:"))
async def cq_show_md_result(callback: CallbackQuery):
    """Fetches and displays the content of a markdown file from GitHub search results."""
    path_hash = callback.data.split(":", 1)[1]
    relative_path = kb.code_path_cache.get(path_hash)
    search_data = md_search_results_cache.get(callback.from_user.id)

    if not relative_path or not search_data:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    
    # Send a new temporary message to inform the user about processing.
    file_name = relative_path.split('/')[-1]
    status_msg = await callback.message.answer(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ `{file_name}`...", parse_mode='markdown')
    await callback.answer() # Acknowledge the button press

    repo_path = search_data['repo_path']
    await service.display_github_file(callback.message, callback.from_user.id, repo_path, relative_path, status_msg_to_delete=status_msg)

##################################################################################################
# SEARCH & FAVORITES
##################################################################################################

async def get_search_results_keyboard(user_id: int, page: int = 0) -> InlineKeyboardMarkup | None:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    search_data = user_search_results_cache.get(user_id)
    if not search_data or not search_data.get('results'):
        return None

    results = search_data['results']
    builder = InlineKeyboardBuilder()
    
    start = page * SEARCH_RESULTS_PER_PAGE
    end = start + SEARCH_RESULTS_PER_PAGE
    page_items = results[start:end]

    for i, result in enumerate(page_items):
        global_index = start + i
        builder.row(InlineKeyboardButton(
            text=f"‚ñ∂Ô∏è {result['path']}", 
            callback_data=f"show_search_idx:{global_index}"
        ))

    # Pagination controls
    total_pages = (len(results) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE
    if total_pages > 1:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_page:{page - 1}"))
        
        pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"))

        if end < len(results):
            pagination_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_page:{page + 1}"))
        
        builder.row(*pagination_buttons)

    return builder.as_markup()

async def perform_full_text_search(query: str) -> list[dict]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø—Ä–∏–º–µ—Ä–∞–º –∫–æ–¥–∞ –≤ matplobblib.
    –ò—â–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–æ–¥–º–æ–¥—É–ª–µ–π, —Ç–µ–º, –∫–æ–¥–∞ –∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∫–æ–¥–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å).
    """
    keywords = query.lower().split()
    if not keywords:
        return []

    found_items = []
    found_paths = set() # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    for submodule_name in matplobblib.submodules:
        try:
            module = matplobblib._importlib.import_module(f'matplobblib.{submodule_name}')
            # –ò—â–µ–º –≤ –ø–æ–ª–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ (—Å docstrings) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            code_dictionary = module.themes_list_dicts_full

            for topic_name, codes in code_dictionary.items():
                for code_name, code_content in codes.items():
                    code_path = f"{submodule_name}.{topic_name}.{code_name}"

                    if code_path in found_paths:
                        continue

                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
                    search_corpus = f"{submodule_name} {topic_name} {code_name} {code_content}".lower()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ—Å—Ç—å –≤ –∫–æ—Ä–ø—É—Å–µ
                    if all(keyword in search_corpus for keyword in keywords):
                        found_items.append({
                            'path': code_path,
                            'name': code_name
                        })
                        found_paths.add(code_path)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ø–æ–¥–º–æ–¥—É–ª–µ {submodule_name}: {e}")

    return found_items

@router.message(Command('matp_search'))
async def search_command(message: Message, state: FSMContext):
    await state.set_state(Search.query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º –∫–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())

@router.message(Search.query)
async def process_search_query(message: Message, state: FSMContext):
    await state.clear()
    query = message.text
    status_msg = await message.answer(f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'...")
    results = await perform_full_text_search(query)

    if not results:
        await status_msg.edit_text(
            f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /ask –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞."
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç–∞–∫ –∫–∞–∫ edit_text –Ω–µ –º–æ–∂–µ—Ç –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))
        return

    # Store query and results in cache for this user
    user_id = message.from_user.id
    user_search_results_cache[user_id] = {'query': query, 'results': results}

    keyboard = await get_search_results_keyboard(user_id, page=0)
    total_pages = (len(results) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE

    await status_msg.edit_text(
        f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'. –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("search_page:"))
async def cq_search_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞."""
    user_id = callback.from_user.id
    search_data = user_search_results_cache.get(user_id)
    if not search_data:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await callback.message.delete()
        return

    page = int(callback.data.split(":", 1)[1])
    keyboard = await get_search_results_keyboard(user_id, page=page)
    
    results = search_data['results']
    query = search_data['query']
    total_pages = (len(results) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE

    await callback.message.edit_text(
        f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.message(Command('favorites'))
async def favorites_command(message: Message):
    user_id = message.from_user.id
    favs = await database.get_favorites(user_id)
    if not favs:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –ø–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞.", reply_markup=kb.get_main_reply_keyboard(user_id))
        return

    builder = InlineKeyboardBuilder()
    for code_path in favs:
        path_hash = hashlib.sha1(code_path.encode()).hexdigest()[:16]
        kb.code_path_cache[path_hash] = code_path
        builder.row(
            InlineKeyboardButton(text=f"üìÑ {code_path}", callback_data=f"show_fav_hash:{path_hash}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"fav_del_hash:{path_hash}")
        )
    
    await message.answer("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("fav_hash:"))
async def cq_add_favorite(callback: CallbackQuery):
    path_hash = callback.data.split(":", 1)[1]
    code_path = kb.code_path_cache.get(path_hash)
    if not code_path:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    success = await database.add_favorite(callback.from_user.id, code_path)
    if success:
        await callback.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=False)
    else:
        await callback.answer("–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.", show_alert=False)

@router.callback_query(F.data.startswith("fav_del_hash:"))
async def cq_delete_favorite(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
    user_id = callback.from_user.id
    path_hash = callback.data.split(":", 1)[1]
    code_path = kb.code_path_cache.get(path_hash)

    if not code_path:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /favorites —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    await database.remove_favorite(user_id, code_path)
    await callback.answer("–ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", show_alert=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    favs = await database.get_favorites(user_id)
    if not favs:
        await callback.message.edit_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.")
        return

    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for new_code_path in favs:
        new_path_hash = hashlib.sha1(new_code_path.encode()).hexdigest()[:16]
        kb.code_path_cache[new_path_hash] = new_code_path
        builder.row(
            InlineKeyboardButton(text=f"üìÑ {new_code_path}", callback_data=f"show_fav_hash:{new_path_hash}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"fav_del_hash:{new_path_hash}")
        )
    
    try:
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            raise

@router.callback_query(F.data == "noop")
async def cq_noop(callback: CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü)."""
    await callback.answer()

@router.callback_query(F.data.startswith("show_search_idx:"))
async def cq_show_search_result_by_index(callback: CallbackQuery):
    """Handles clicks on search result buttons."""
    user_id = callback.from_user.id
    search_data = user_search_results_cache.get(user_id)
    if not search_data:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    try:
        index = int(callback.data.split(":", 1)[1])
        results = search_data['results']
        
        if not (0 <= index < len(results)):
            raise IndexError("Search result index out of bounds.")

        code_path = results[index]['path']
        
        await callback.answer() # Acknowledge the callback
        await service.show_code_by_path(callback.message, callback.from_user.id, code_path, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞")

    except (ValueError, IndexError) as e:
        logging.warning(f"Invalid search index from user {user_id}. Data: {callback.data}. Error: {e}")
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
    except Exception as e:
        logging.error(f"Error showing search result by index for user {user_id}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", show_alert=True)

@router.callback_query(F.data.startswith("show_fav_hash:"))
async def cq_show_favorite(callback: CallbackQuery):
    """Handles clicks on favorite item buttons."""
    path_hash = callback.data.split(":", 1)[1]
    code_path = kb.code_path_cache.get(path_hash)
    if not code_path:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ /favorites —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    await callback.answer()
    await service.show_code_by_path(callback.message, callback.from_user.id, code_path, "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

@router.callback_query(F.data.startswith("run_hash:"))
async def cq_run_code_from_lib(callback: CallbackQuery):
    path_hash = callback.data.split(":", 1)[1]
    code_path = kb.code_path_cache.get(path_hash)
    if not code_path:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    submodule, topic, code_name = code_path.split('.')
    
    module = matplobblib._importlib.import_module(f'matplobblib.{submodule}')
    code_to_run = module.themes_list_dicts_full_nd[topic][code_name] # –ë–µ—Ä–µ–º –∫–æ–¥ –±–µ–∑ docstring –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    await callback.answer("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–º–µ—Ä...")
    await service.execute_code_and_send_results(callback.message, code_to_run)
##################################################################################################
# SETTINGS
##################################################################################################

# –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î
async def get_settings_keyboard(user_id: int) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    settings = await database.get_user_settings(user_id) # –¢–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    builder = InlineKeyboardBuilder()

    show_docstring_status = "‚úÖ –í–∫–ª" if settings['show_docstring'] else "‚ùå –í—ã–∫–ª"

    builder.row(
        InlineKeyboardButton(
            text=f"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ: {show_docstring_status}",
            callback_data="settings_toggle_docstring"
        )
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Markdown
    md_mode = settings.get('md_display_mode', 'md_file')
    md_mode_map = {
        'md_file': 'üìÅ .md —Ñ–∞–π–ª',
        'html_file': 'üìÅ .html —Ñ–∞–π–ª',
        'pdf_file': 'üìÅ .pdf —Ñ–∞–π–ª'
    }
    md_mode_text = md_mode_map.get(md_mode, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    builder.row(InlineKeyboardButton(
        text=f"–ü–æ–∫–∞–∑ .md: {md_mode_text}",
        callback_data="settings_cycle_md_mode"
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ LaTeX
    padding = settings['latex_padding']
    builder.row(
        InlineKeyboardButton(text="‚ûñ", callback_data="latex_padding_decr"),
        InlineKeyboardButton(text=f"–û—Ç—Å—Ç—É–ø LaTeX: {padding}px", callback_data="noop"),
        InlineKeyboardButton(text="‚ûï", callback_data="latex_padding_incr")
    )

    builder.row(
        InlineKeyboardButton(text="‚ûñ", callback_data="latex_dpi_decr"),
        InlineKeyboardButton(text=f"DPI LaTeX: {settings['latex_dpi']}dpi", callback_data="noop"),
        InlineKeyboardButton(text="‚ûï", callback_data="latex_dpi_incr")
    )

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ ---
    user_repos = await database.get_user_repos(user_id)
    repo_button_text = "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" if user_repos else "–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    builder.row(InlineKeyboardButton(
        text=repo_button_text,
        callback_data="manage_repos"
    ))

    return builder

@router.message(Command('settings'))
async def command_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings."""
    keyboard = await get_settings_keyboard(message.from_user.id) # –¢–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "settings_toggle_docstring")
async def cq_toggle_docstring(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 'show_docstring'."""
    user_id = callback.from_user.id
    settings = await database.get_user_settings(user_id) # –¢–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    settings['show_docstring'] = not settings['show_docstring']
    await database.update_user_settings_db(user_id, settings) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

MD_DISPLAY_MODES = ['md_file', 'html_file', 'pdf_file']

@router.callback_query(F.data == "settings_cycle_md_mode")
async def cq_cycle_md_mode(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Markdown."""
    user_id = callback.from_user.id
    settings = await database.get_user_settings(user_id)

    current_mode = settings.get('md_display_mode', 'md_file')
    try:
        current_index = MD_DISPLAY_MODES.index(current_mode)
        next_index = (current_index + 1) % len(MD_DISPLAY_MODES)
        new_mode = MD_DISPLAY_MODES[next_index]
    except ValueError:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        new_mode = MD_DISPLAY_MODES[0]

    settings['md_display_mode'] = new_mode
    await database.update_user_settings_db(user_id, settings)

    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())

    md_mode_map = {
        'md_file': 'üìÅ .md —Ñ–∞–π–ª',
        'html_file': 'üìÅ .html —Ñ–∞–π–ª',
        'pdf_file': 'üìÅ .pdf —Ñ–∞–π–ª'
    }
    await callback.answer(f"–†–µ–∂–∏–º –ø–æ–∫–∞–∑–∞ .md –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {md_mode_map[new_mode]}")

##################################################################################################
# REPO MANAGEMENT
##################################################################################################

@router.callback_query(F.data == "manage_repos")
async def cq_manage_repos(callback: CallbackQuery):
    """Displays the repository management interface."""
    user_id = callback.from_user.id
    keyboard = await kb.get_repo_management_keyboard(user_id)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ GitHub:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_settings")
async def cq_back_to_settings(callback: CallbackQuery):
    """Returns to the main settings menu."""
    keyboard = await get_settings_keyboard(callback.from_user.id)
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard.as_markup())
    await callback.answer()

@router.callback_query(F.data == "repo_add_new")
async def cq_add_new_repo_prompt(callback: CallbackQuery, state: FSMContext):
    """Prompts the user to enter a new repository path."""
    await state.set_state(RepoManagement.add_repo)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ `owner/repository`:", reply_markup=None)
    await callback.answer()

@router.message(RepoManagement.add_repo)
async def process_add_repo(message: Message, state: FSMContext):
    """Processes the new repository path from the user."""
    repo_path = message.text.strip()
    # Basic validation
    if re.match(r"^[a-zA-Z0-9_-]+/[a-zA-Z0-9_.-]+$", repo_path):
        success = await database.add_user_repo(message.from_user.id, repo_path)
        if success:
            await message.answer(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π `{repo_path}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode='markdown')
        else:
            await message.answer(f"‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π `{repo_path}` —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", parse_mode='markdown')
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `owner/repository`.")

    await state.clear()
    # Show updated repo list
    keyboard = await kb.get_repo_management_keyboard(message.from_user.id)
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ GitHub:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("repo_del_hash:"))
async def cq_delete_repo(callback: CallbackQuery):
    """Deletes a repository from the user's list."""
    repo_hash = callback.data.split(":", 1)[1]
    repo_path = kb.code_path_cache.get(repo_hash)
    if not repo_path:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
        return

    await database.remove_user_repo(callback.from_user.id, repo_path)
    await callback.answer(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_path} —É–¥–∞–ª–µ–Ω.", show_alert=False)

    # Refresh the keyboard
    keyboard = await kb.get_repo_management_keyboard(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

@router.callback_query(F.data.startswith("repo_edit_hash:"))
async def cq_edit_repo_prompt(callback: CallbackQuery, state: FSMContext):
    """Prompts the user to edit a repository path."""
    repo_hash = callback.data.split(":", 1)[1]
    repo_path = kb.code_path_cache.get(repo_hash)
    if not repo_path:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
        return

    await state.set_state(RepoManagement.edit_repo)
    await state.update_data(old_repo_path=repo_path)
    await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è `{repo_path}` (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `owner/repo`):", parse_mode='markdown')
    await callback.answer()

@router.message(RepoManagement.edit_repo)
async def process_edit_repo(message: Message, state: FSMContext):
    """Processes the edited repository path."""
    new_repo_path = message.text.strip()
    user_data = await state.get_data()
    old_repo_path = user_data.get('old_repo_path')

    if re.match(r"^[a-zA-Z0-9_-]+/[a-zA-Z0-9_.-]+$", new_repo_path):
        await database.update_user_repo(message.from_user.id, old_repo_path, new_repo_path)
        await message.answer(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ `{new_repo_path}`.", parse_mode='markdown')
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `owner/repository`.")

    await state.clear()
    # Show updated repo list
    keyboard = await kb.get_repo_management_keyboard(message.from_user.id)
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ GitHub:", reply_markup=keyboard)

##################################################################################################
# LATEX SETTINGS
##################################################################################################

@router.callback_query(F.data.startswith("latex_padding_"))
async def cq_change_latex_padding(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–∞ LaTeX."""
    user_id = callback.from_user.id
    settings = await database.get_user_settings(user_id)
    current_padding = settings['latex_padding']

    action = callback.data.split('_')[-1]  # 'incr' or 'decr'
    new_padding = current_padding

    if action == "incr":
        new_padding += 5
    elif action == "decr":
        new_padding = max(0, current_padding - 5)

    if new_padding == current_padding:
        await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
        return

    settings['latex_padding'] = new_padding
    await database.update_user_settings_db(user_id, settings)

    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer(f"–û—Ç—Å—Ç—É–ø –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_padding}px")

@router.callback_query(F.data.startswith("latex_dpi_"))
async def cq_change_latex_dpi(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è DPI LaTeX."""
    user_id = callback.from_user.id
    settings = await database.get_user_settings(user_id)
    current_dpi = settings.get('latex_dpi', 300) # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    action = callback.data.split('_')[-1]  # 'incr' or 'decr'
    new_dpi = current_dpi

    if action == "incr":
        new_dpi = min(600, current_dpi + 50)
    elif action == "decr":
        new_dpi = max(100, current_dpi - 50)

    if new_dpi == current_dpi:
        await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ DPI –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç).")
        return

    settings['latex_dpi'] = new_dpi
    await database.update_user_settings_db(user_id, settings)

    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer(f"DPI –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_dpi}dpi")

##################################################################################################
# HELP COMMAND CALLBACKS
##################################################################################################

@router.callback_query(F.data == "help_cmd_matp_all")
async def cq_help_cmd_matp_all(callback: CallbackQuery):
    """Handler for '/matp_all' button from help menu."""
    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /matp_all
    await matp_all_command_inline(callback.message)

@router.callback_query(F.data == "help_cmd_matp_search")
async def cq_help_cmd_matp_search(callback: CallbackQuery, state: FSMContext):
    """Handler for '/matp_search' button from help menu."""
    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /matp_search
    await state.set_state(Search.query)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º –∫–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())

@router.callback_query(F.data == "help_cmd_lec_search")
async def cq_help_cmd_lec_search(callback: CallbackQuery, state: FSMContext):
    """Handler for '/lec_search' button from help menu."""
    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /lec_search
    await state.set_state(MarkdownSearch.query)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º:", reply_markup=ReplyKeyboardRemove())

@router.callback_query(F.data == "help_cmd_lec_all")
async def cq_help_cmd_lec_all(callback: CallbackQuery):
    """Handler for '/lec_all' button from help menu."""
    await callback.answer()
    await lec_all_command(callback.message)

@router.callback_query(F.data == "help_cmd_favorites")
async def cq_help_cmd_favorites(callback: CallbackQuery):
    """Handler for '/favorites' button from help menu."""
    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /favorites
    # favorites_command –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message, callback.message –ø–æ–¥—Ö–æ–¥–∏—Ç
    await favorites_command(callback.message)

@router.callback_query(F.data == "help_cmd_latex")
async def cq_help_cmd_latex(callback: CallbackQuery, state: FSMContext):
    """Handler for '/latex' button from help menu."""
    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /latex
    await latex_command(callback.message, state)

@router.callback_query(F.data == "help_cmd_mermaid")
async def cq_help_cmd_mermaid(callback: CallbackQuery, state: FSMContext):
    """Handler for '/mermaid' button from help menu."""
    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /mermaid
    await mermaid_command(callback.message, state)

@router.callback_query(F.data == "help_cmd_settings")
async def cq_help_cmd_settings(callback: CallbackQuery):
    """Handler for '/settings' button from help menu."""
    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /settings
    keyboard = await get_settings_keyboard(callback.from_user.id)
    await callback.message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "help_cmd_update")
async def cq_help_cmd_update(callback: CallbackQuery):
    """Handler for '/update' button from help menu."""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    await callback.answer("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /update
    status_msg = await callback.message.answer("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ `matplobblib`...")
    success, status_message_text = await update_library_async('matplobblib')
    if success:
        import importlib
        importlib.reload(matplobblib)
        await status_msg.edit_text(status_message_text)
    else:
        await status_msg.edit_text(status_message_text)
    await callback.message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(callback.from_user.id))

@router.callback_query(F.data == "help_cmd_clear_cache")
async def cq_help_cmd_clear_cache(callback: CallbackQuery):
    """Handler for '/clear_cache' button from help menu."""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    await callback.answer("–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞...")
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /clear_cache
    # clear_cache_command –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message, callback.message –ø–æ–¥—Ö–æ–¥–∏—Ç
    await clear_cache_command(callback.message)

@router.callback_query(F.data == "help_cmd_execute")
async def cq_help_cmd_execute(callback: CallbackQuery, state: FSMContext):
    """Handler for '/execute' button from help menu."""
    #if callback.from_user.id != ADMIN_USER_ID:
        #await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        #return

    await callback.answer()
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /execute
    await state.set_state(Execution.code)
    await callback.message.answer(
        EXECUTE_HELP_TEXT,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='markdown'
    )

@router.callback_query(F.data == "help_cmd_help")
async def cq_help_cmd_help(callback: CallbackQuery):
    """Handler for '/help' button from help menu. Edits the message."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await callback.message.edit_text(
            '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ matplobblib.\n\n'
            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:',
            reply_markup=kb.get_help_inline_keyboard(callback.from_user.id)
        )
        await callback.answer()
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, Telegram –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É.
        # –ú—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏.
        if "message is not modified" in e.message:
            await callback.answer("–í—ã —É–∂–µ –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏.")
        else:
            # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ, –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            raise