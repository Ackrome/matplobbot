import logging
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from .. import keyboards as kb, database
from ..services import rendering_display

router = Router()

class LatexRender(StatesGroup):
    formula = State()

class MermaidRender(StatesGroup):
    code = State()

##################################################################################################
# LATEX
##################################################################################################

@router.message(Command('latex'))
async def latex_command(message: Message, state: FSMContext):
    await state.set_state(LatexRender.formula)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ä–º—É–ª—É –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ LaTeX (–º–æ–∂–Ω–æ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö `$...`):",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(LatexRender.formula)
async def process_latex_formula(message: Message, state: FSMContext):
    await state.clear()
    formula = message.text
    
    status_msg = await message.answer("üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—É–ª—ã...")
    await message.bot.send_chat_action(message.chat.id, "upload_photo") 
    try:
        settings = await database.get_user_settings(message.from_user.id)
        padding = settings['latex_padding']
        dpi = settings['latex_dpi']
        image_buffer = await rendering_display.render_latex_to_image(formula, padding, dpi)
        
        await status_msg.delete()
        await message.answer_photo(
            photo=BufferedInputFile(image_buffer.read(), filename="formula.png"),
            caption=f"–í–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞:\n`{formula}`",
            parse_mode='markdown'
        )
        await message.answer("–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))

    except (ValueError, RuntimeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ LaTeX –¥–ª—è '{formula}': {e}", exc_info=True)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
        error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É.\n\n**–û—à–∏–±–∫–∞:**\n```\n{e}\n```\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
        await status_msg.edit_text(error_text, parse_mode='markdown')
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ LaTeX –¥–ª—è '{formula}': {e}", exc_info=True)
        await status_msg.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        )

##################################################################################################
# MERMAID
##################################################################################################

@router.message(Command('mermaid'))
async def mermaid_command(message: Message, state: FSMContext):
    """Handles the /mermaid command for rendering diagrams."""
    await state.set_state(MermaidRender.code)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ Mermaid:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(MermaidRender.code)
async def process_mermaid_code(message: Message, state: FSMContext):
    """Renders the received Mermaid code into a PNG image."""
    await state.clear()
    mermaid_code = message.text
    
    status_msg = await message.answer("üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∏–∞–≥—Ä–∞–º–º—ã...")
    await message.bot.send_chat_action(message.chat.id, "upload_photo")
    try:
        image_buffer = await rendering_display.render_mermaid_to_image(mermaid_code)
        
        await status_msg.delete()
        await message.answer_photo(
            photo=BufferedInputFile(image_buffer.read(), filename="diagram.png"),
            caption=f"–í–∞—à–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ Mermaid."
        )
        await message.answer("–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.get_main_reply_keyboard(message.from_user.id))

    except (ValueError, RuntimeError) as e:
        error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É.\n\n**–û—à–∏–±–∫–∞:**\n```\n{e}\n```"
        await status_msg.edit_text(error_text, parse_mode='markdown')

