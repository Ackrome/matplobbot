import logging

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import  Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..database import get_user_settings, update_user_settings_db, get_user_repos



router = Router()
##################################################################################################
# SETTINGS
##################################################################################################

# –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î
async def get_settings_keyboard(user_id: int) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    settings = await get_user_settings(user_id) # –¢–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    builder = InlineKeyboardBuilder()

    show_docstring_status = "‚úÖ –í–∫–ª" if settings['show_docstring'] else "‚ùå –í—ã–∫–ª"

    builder.row(
        InlineKeyboardButton(
            text=f"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ: {show_docstring_status}",
            callback_data="settings_toggle_docstring"
        )
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Markdown
    md_mode = settings.get('md_display_mode', 'md_file')
    md_mode_map = {
        'md_file': 'üìÅ .md —Ñ–∞–π–ª',
        'html_file': 'üìÅ .html —Ñ–∞–π–ª',
        'pdf_file': 'üìÅ .pdf —Ñ–∞–π–ª'
    }
    md_mode_text = md_mode_map.get(md_mode, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    builder.row(InlineKeyboardButton(
        text=f"–ü–æ–∫–∞–∑ .md: {md_mode_text}",
        callback_data="settings_cycle_md_mode"
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ LaTeX
    padding = settings['latex_padding']
    builder.row(
        InlineKeyboardButton(text="‚ûñ", callback_data="latex_padding_decr"),
        InlineKeyboardButton(text=f"–û—Ç—Å—Ç—É–ø LaTeX: {padding}px", callback_data="noop"),
        InlineKeyboardButton(text="‚ûï", callback_data="latex_padding_incr")
    )

    builder.row(
        InlineKeyboardButton(text="‚ûñ", callback_data="latex_dpi_decr"),
        InlineKeyboardButton(text=f"DPI LaTeX: {settings['latex_dpi']}dpi", callback_data="noop"),
        InlineKeyboardButton(text="‚ûï", callback_data="latex_dpi_incr")
    )

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ ---
    user_repos = await get_user_repos(user_id)
    repo_button_text = "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" if user_repos else "–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    builder.row(InlineKeyboardButton(
        text=repo_button_text,
        callback_data="manage_repos"
    ))

    return builder

@router.message(Command('settings'))
async def command_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings."""
    keyboard = await get_settings_keyboard(message.from_user.id) # –¢–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "settings_toggle_docstring")
async def cq_toggle_docstring(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 'show_docstring'."""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id) # –¢–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    settings['show_docstring'] = not settings['show_docstring']
    await update_user_settings_db(user_id, settings) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

MD_DISPLAY_MODES = ['md_file', 'html_file', 'pdf_file']

@router.callback_query(F.data == "settings_cycle_md_mode")
async def cq_cycle_md_mode(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Markdown."""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)

    current_mode = settings.get('md_display_mode', 'md_file')
    try:
        current_index = MD_DISPLAY_MODES.index(current_mode)
        next_index = (current_index + 1) % len(MD_DISPLAY_MODES)
        new_mode = MD_DISPLAY_MODES[next_index]
    except ValueError:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        new_mode = MD_DISPLAY_MODES[0]

    settings['md_display_mode'] = new_mode
    await update_user_settings_db(user_id, settings)

    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())

    md_mode_map = {
        'md_file': 'üìÅ .md —Ñ–∞–π–ª',
        'html_file': 'üìÅ .html —Ñ–∞–π–ª',
        'pdf_file': 'üìÅ .pdf —Ñ–∞–π–ª'
    }
    await callback.answer(f"–†–µ–∂–∏–º –ø–æ–∫–∞–∑–∞ .md –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {md_mode_map[new_mode]}")
    
    
@router.callback_query(F.data == "back_to_settings")
async def cq_back_to_settings(callback: CallbackQuery):
    """Returns to the main settings menu."""
    keyboard = await get_settings_keyboard(callback.from_user.id)
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard.as_markup())
    await callback.answer()
    
##################################################################################################
# LATEX SETTINGS
##################################################################################################

@router.callback_query(F.data.startswith("latex_padding_"))
async def cq_change_latex_padding(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–∞ LaTeX."""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)
    current_padding = settings['latex_padding']

    action = callback.data.split('_')[-1]  # 'incr' or 'decr'
    new_padding = current_padding

    if action == "incr":
        new_padding += 5
    elif action == "decr":
        new_padding = max(0, current_padding - 5)

    if new_padding == current_padding:
        await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
        return

    settings['latex_padding'] = new_padding
    await update_user_settings_db(user_id, settings)

    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer(f"–û—Ç—Å—Ç—É–ø –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_padding}px")

@router.callback_query(F.data.startswith("latex_dpi_"))
async def cq_change_latex_dpi(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è DPI LaTeX."""
    user_id = callback.from_user.id
    settings = await get_user_settings(user_id)
    current_dpi = settings.get('latex_dpi', 300) # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    action = callback.data.split('_')[-1]  # 'incr' or 'decr'
    new_dpi = current_dpi

    if action == "incr":
        new_dpi = min(600, current_dpi + 50)
    elif action == "decr":
        new_dpi = max(100, current_dpi - 50)

    if new_dpi == current_dpi:
        await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ DPI –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç).")
        return

    settings['latex_dpi'] = new_dpi
    await update_user_settings_db(user_id, settings)

    keyboard = await get_settings_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer(f"DPI –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_dpi}dpi")
