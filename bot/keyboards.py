import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from cachetools import LRUCache
import hashlib
import matplobblib
import os # Import os to access environment variables like ADMIN_USER_ID
from . import database # Import database to check for user repos

logger = logging.getLogger(__name__)

# Define base commands that are always available
BASE_COMMANDS = ['/matp_all', '/matp_search', '/lec_search', '/lec_all', '/favorites', '/settings', '/help', '/latex', '/mermaid']
ADMIN_COMMANDS = ['/update', '/clear_cache']

# Cache for long code paths to use in callback_data
code_path_cache = LRUCache(maxsize=1024)

# Pre-generate data structure for topics and codes, not actual ReplyKeyboards.
# This structure will be used by functions to build keyboards dynamically.
# topics_data = {submodule_name: {'topics': [list_of_topics], 'codes': {topic_name: [list_of_codes]}}}
topics_data = dict()

logger.info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ç–µ–º –∏ –∑–∞–¥–∞—á.")
for submodule_name in matplobblib.submodules:
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–æ–¥—É–ª—è: {submodule_name} –¥–ª—è topics_data.")
    try:
        module = matplobblib._importlib.import_module(f'matplobblib.{submodule_name}')
        # We need to get keys from themes_list_dicts_full for topics and codes
        # regardless of show_docstring, as the keyboard structure should be consistent.
        # The content (code with/without docstring) is handled in handlers.py.
        module_full_dict = module.themes_list_dicts_full # Assuming this always exists and has all keys

        module_topics = list(module_full_dict.keys())
        logger.debug(f"–¢–µ–º—ã –¥–ª—è {submodule_name}: {module_topics}")

        sub_topics_codes = {
            topic_key: list(module_full_dict[topic_key].keys())
            for topic_key in module_topics
        }
        topics_data[submodule_name] = {
            'topics': module_topics,
            'codes': sub_topics_codes
        }
        logger.debug(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–º–æ–¥—É–ª—è: {submodule_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–º–æ–¥—É–ª—è {submodule_name}: {e}", exc_info=True)

logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ç–µ–º –∏ –∑–∞–¥–∞—á.")

def _get_user_commands(user_id: int) -> list[str]:
    """Helper to get commands for a user."""
    commands = list(BASE_COMMANDS)
    admin_id_str = os.getenv('ADMIN_USER_ID')
    if admin_id_str and user_id == int(admin_id_str):
        commands.extend(ADMIN_COMMANDS)
    return commands

# Function to get the main ReplyKeyboardMarkup (used for /start, after /code)
def get_main_reply_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    current_commands = _get_user_commands(user_id)
    keyboard_buttons = [[KeyboardButton(text=cmd)] for cmd in current_commands]
    return ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True,
        input_field_placeholder='–ß—Ç–æ –≤—ã–±–µ—Ä–µ–º, —Ö–æ–∑—è–∏–Ω?',
        one_time_keyboard=True,
    )






# Function to get the help InlineKeyboardMarkup
def get_help_inline_keyboard(user_id: int) -> InlineKeyboardMarkup:
    inline_keyboard_rows = [
        [InlineKeyboardButton(text="üìÇ /matp_all - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", callback_data="help_cmd_matp_all")],
        [InlineKeyboardButton(text="üîç /matp_search - –ü–æ–∏—Å–∫ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ", callback_data="help_cmd_matp_search")],
        [InlineKeyboardButton(text="üìö /lec_search - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º", callback_data="help_cmd_lec_search")],
        [InlineKeyboardButton(text="üìÇ /lec_all - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤", callback_data="help_cmd_lec_all")],
        [InlineKeyboardButton(text="‚≠ê /favorites - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="help_cmd_favorites")],
        [InlineKeyboardButton(text="‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="help_cmd_settings")],
        [InlineKeyboardButton(text="üßÆ /latex - –†–µ–Ω–¥–µ—Ä LaTeX", callback_data="help_cmd_latex")],
        [InlineKeyboardButton(text="üé® /mermaid - –†–µ–Ω–¥–µ—Ä Mermaid", callback_data="help_cmd_mermaid")]
    ]
    admin_id = os.getenv('ADMIN_USER_ID')
    if admin_id and user_id == int(admin_id):
        inline_keyboard_rows.append([InlineKeyboardButton(text="üîÑ /update - –û–±–Ω–æ–≤–∏—Ç—å (admin)", callback_data="help_cmd_update")])
        inline_keyboard_rows.append([InlineKeyboardButton(text="üóëÔ∏è /clear_cache - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (admin)", callback_data="help_cmd_clear_cache")])
    
    inline_keyboard_rows.append([InlineKeyboardButton(text="‚ÑπÔ∏è /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞", callback_data="help_cmd_help")])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard_rows)

def get_code_action_keyboard(code_path: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–¥–æ–º.
    :param code_path: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "pyplot.line_plot.simple_plot"
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Telegram "BUTTON_DATA_INVALID"
    path_hash = hashlib.sha1(code_path.encode()).hexdigest()[:16]
    code_path_cache[path_hash] = code_path

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"run_hash:{path_hash}"),
        InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_hash:{path_hash}")
    )
    return builder.as_markup()

async def get_repo_management_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """Creates an inline keyboard for managing user repositories."""
    repos = await database.get_user_repos(user_id)
    builder = InlineKeyboardBuilder()

    for repo_path in repos:
        repo_hash = hashlib.sha1(repo_path.encode()).hexdigest()[:16]
        code_path_cache[repo_hash] = repo_path
        builder.row(
            InlineKeyboardButton(text=f"Repo: {repo_path}", callback_data="noop"),
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"repo_edit_hash:{repo_hash}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"repo_del_hash:{repo_hash}")
        )
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", callback_data="repo_add_new"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings"))
    return builder.as_markup()
