# .gitlab-ci.yml

# This file is a template for a CI/CD pipeline for a project with a Dockerized
# Python bot and a FastAPI application.
#
# It includes the following stages:
# 1. lint:   Checks Python code for style issues using flake8.
# 2. build:  Builds Docker images for both applications and pushes them to the
#            GitLab Container Registry.
# 3. deploy: A manual job to deploy the applications to a production server
#            using docker-compose over SSH.

stages:
  - lint
  - build
  - deploy

# Define image tags using predefined CI/CD variables.
# Using the commit SHA ensures that each commit has a unique image tag.
variables:
  BOT_IMAGE_TAG: $CI_REGISTRY_IMAGE/telegram-bot:$CI_COMMIT_SHORT_SHA
  FASTAPI_IMAGE_TAG: $CI_REGISTRY_IMAGE/fastapi-stats:$CI_COMMIT_SHORT_SHA
  LATEST_BOT_IMAGE_TAG: $CI_REGISTRY_IMAGE/telegram-bot:latest
  LATEST_FASTAPI_IMAGE_TAG: $CI_REGISTRY_IMAGE/fastapi-stats:latest

# --------------------------- LINT STAGE ---------------------------
lint-python:
  stage: lint
  image: python:3.11-slim
  before_script:
    - pip install flake8
  script:
    - echo "Linting Python code..."
    # Run flake8 on both application directories.
    # You can add more checks or use other tools like black, isort, mypy.
    - flake8 bot/
    - flake8 fastapi_stats_app/

# --------------------------- BUILD STAGE ---------------------------
# This template uses a YAML anchor for a shared Docker build configuration.
.docker-build-template: &docker-build-config
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
      alias: docker
  variables:
    # Tell the docker client to talk to the docker daemon in the dind service.
    DOCKER_HOST: tcp://docker:2375
    # Disable TLS for simplicity in this example.
    DOCKER_TLS_CERTDIR: ""
  before_script:
    # $CI_REGISTRY_USER, $CI_REGISTRY_PASSWORD, and $CI_REGISTRY are predefined
    # GitLab CI/CD variables that allow logging into the project's container registry.
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-bot:
  stage: build
  <<: *docker-build-config
  script:
    - echo "Building bot image..."
    # The build context is the root of the repository.
    - docker build --pull -f Dockerfile.bot -t $BOT_IMAGE_TAG -t $LATEST_BOT_IMAGE_TAG .
    - echo "Pushing bot image to registry..."
    - docker push $BOT_IMAGE_TAG
    - docker push $LATEST_BOT_IMAGE_TAG

build-fastapi:
  stage: build
  <<: *docker-build-config
  script:
    - echo "Building FastAPI app image..."
    # The build context is the root of the repository.
    - docker build --pull -f fastapi_stats_app/Dockerfile -t $FASTAPI_IMAGE_TAG -t $LATEST_FASTAPI_IMAGE_TAG .
    - echo "Pushing FastAPI app image to registry..."
    - docker push $FASTAPI_IMAGE_TAG
    - docker push $LATEST_FASTAPI_IMAGE_TAG

# --------------------------- DEPLOY STAGE ---------------------------
# This is a sample deployment job. You will need to adapt it to your infrastructure.
#
# Prerequisites for this job:
# 1. A server with Docker and docker-compose installed.
# 2. GitLab CI/CD variables configured in your project settings (under Settings > CI/CD > Variables):
#    - SSH_PRIVATE_KEY: The private SSH key to access your deployment server.
#    - DEPLOY_SERVER_USER: The username for the SSH connection (e.g., 'ubuntu').
#    - DEPLOY_SERVER_IP: The IP address of your deployment server.
# 3. On your server, you should have:
#    - A project directory (e.g., /home/ubuntu/matplobbot).
#    - A `docker-compose.yml` file in that directory, modified to use images
#      from the GitLab registry instead of building them.
#      Example `image` directive: image: ${CI_REGISTRY_IMAGE}/telegram-bot:latest
#    - A `.env` file in the same directory containing secrets like BOT_TOKEN and ADMIN_USER_ID.
#
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - |
      ssh ${DEPLOY_SERVER_USER}@${DEPLOY_SERVER_IP} "
        set -e
        # IMPORTANT: Change this path to your actual project path on the server
        cd /home/ubuntu/matplobbot

        echo 'Logging into GitLab Registry...'
        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

        echo 'Pulling latest images...'
        docker-compose pull

        echo 'Restarting services with new images...'
        docker-compose up -d --remove-orphans

        echo 'Cleaning up old, unused Docker images...'
        docker image prune -af
      "
  environment:
    name: production
    url: http://${DEPLOY_SERVER_IP}:9583 # URL to the stats app
  when: manual
  only:
    - main